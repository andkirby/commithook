{
  "name": "CmHook",
  "tagline": "CmHook is GIT commit hook code validation and auto formatting/filling commit message with the issue tracker integration.",
  "body": "# CommitHOOKs\r\n\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/andkirby/commithook?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nThe main purpose of this project is\r\n - checking coding standards before commit (with using PHP CodeSniffer, JSHint, or any lint tool)\r\n - filling up commit messages automatically to proper format ([details](doc/commit-msg.md))\r\n\r\nSupprted file types: php, phtml, js, coffee, css, scss, xml, sh, scss, css, json, less, html, htm.\r\n\r\n## The simplest commit message you could ever make\r\n```\r\n$ git add myfile.php\r\n$ git commit -m 'Added my file.'\r\n```\r\nLast command makes commit with generated commit message:\r\n```\r\nImplemented #33: Make smth good now\r\n - Added my file.\r\n```\r\nSee more details about [short commit messages](doc/commit-msg.md).\r\n\r\n## Installation\r\n### Latest release is `v2.0.0-beta.35`\r\n### Install globally\r\nTo get last beta version please define your `minimum-stability`.\r\n```\r\n{\r\n  \"minimum-stability\": \"beta\",\r\n  \"prefer-stable\": true\r\n}\r\n```\r\n\r\nDue to reason the package requires one package which still in \"dev\", please fetch it first:\r\n```shell\r\n$ composer global require chobie/jira-api-restclient ^2.0@dev\r\n```\r\n\r\nNow fetch the package:\r\n```shell\r\n$ composer global require andkirby/commithook ~2.0@beta\r\n```\r\n\r\n#### Sample `.bashrc`\r\nHere is [an example of `.bashrc` file](doc/example-bashrc.md) for global using.\r\n\r\n### Separate installation\r\nIf global way doesn't work you may use [installation via `create-project`](doc/install-create-project.md).\r\n\r\n## Documentation references\r\n### Installation\r\n[Initialize configuration wizard](doc/example-quick-wizard.md)<br>\r\n[GIT integration: hook files installation](doc/hooks-installation.md)<br>\r\n### Code validation\r\n[Ignore validation](doc/exclude-code-validation.md)<br>\r\n[Protect code](doc/protect-code.md)<br>\r\n[Enable JsHint validation (Javascript)](doc/jshint-setup.md)<br>\r\n### Commit message\r\n[Commit message format](doc/commit-msg.md)<br>\r\n[Ignore commit message validation](doc/commit-msg-ignore.md)<br>\r\n[Active task in commit message](doc/active-task.md)<br>\r\n[Auto-explode commit message into the list](doc/config-message.md)<br>\r\n\r\n## Problems\r\n### Bugs\r\n[Issue bugs list](../../labels/bug).\r\n#### Code validators doesn't work with GIT cache\r\nThe code validation with GIT but it doesn't support git cache. It means if you added a file (`git add file.php`), changed it, and trying to commit (without adding it into GIT cache). In commit, of course, you will get code from cache but validators will validate your real file. ([#113](../../issues/113))\r\n#### Minor bugs in short commit message\r\n[#92](../../issues/92), [#91](../../issues/91), [#32](../../issues/32)\r\n\r\n## Tips & tricks\r\n### Redundant gaps in code\r\nYou may quickly find gaps/trailing spaces in your code by the regular expression:\r\n```\r\n(\\n\\s*\\n\\s*\\})|(\\n\\s*\\n\\s*\\n)|(\\{\\n\\s*\\n)| +\\n\r\n```\r\nJust use it in your IDE.\r\n\r\n## OS environment\r\nTested on Windows in GIT Bash v2.9.\r\n\r\nFeel free [to create](../../issues/new \"Add a new issue\") your faced issue.\r\n\r\n## [Release notes](doc/release-notes.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}